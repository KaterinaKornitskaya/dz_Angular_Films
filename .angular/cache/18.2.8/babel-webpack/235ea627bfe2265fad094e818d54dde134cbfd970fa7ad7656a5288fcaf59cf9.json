{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { FormsModule } from \"@angular/forms\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { HttpService } from './http.service';\nimport { FilmService } from './film.service';\nlet AppComponent = class AppComponent {\n  httpService;\n  title = \"\";\n  film;\n  filmTitle;\n  filmYear;\n  filmDirector;\n  filmReleased;\n  filmActors;\n  filmPoster;\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n  show() {\n    this.httpService.getFilm(this.title).subscribe(data => {\n      this.filmTitle = data[\"Title\"];\n      this.filmDirector = data[\"Director\"];\n      this.film.filmTitle = data[\"Title\"];\n      this.film.filmDirector = data[\"Director\"];\n      console.log(data);\n      console.log(this.filmDirector);\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'my-app',\n  standalone: true,\n  // указывает, что компонент будет независимым, то есть для него не нужно создавать дополнительных модулей\n  imports: [HttpClientModule, FormsModule],\n  templateUrl: './app.component.html',\n  providers: [HttpService, FilmService]\n})], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}